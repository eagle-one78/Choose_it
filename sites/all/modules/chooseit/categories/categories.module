<?php
/**
* @file
 * A module to display the categories available
 */
$categoryObject = NULL;
define('PERMISSION_VIEW_CATEGORY', 'view category');
define('PERMISSION_EDIT_CATEGORY', 'edit category');
define('PERMISSION_INSERT_CATEGORY', 'insert category');

/**
 * Implements hook_permission().
 */
function categories_permission() {
  return array(
    PERMISSION_VIEW_CATEGORY => array(
      'title' => t('View the categories'),
      'description' => t('View the categories', array()),
    ),
    PERMISSION_EDIT_CATEGORY => array(
      'title' => t('Edit the categories'),
      'description' => t('Editing the categories', array()),
    ),
    PERMISSION_INSERT_CATEGORY => array(
      'title' => t('Insert a categories'),
      'description' => t('Insert new category', array()),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function categories_menu() {
  $items = array();
  $items['categories'] = array(
    'title' => 'Visa kategorier',
    'page callback' => 'categories_callback',
    'access arguments' => array(PERMISSION_VIEW_CATEGORY),
  );
  $items['category/edit'] = array(
    'title' => 'Redigera kategori',
    'page arguments' => array(1),
    'page callback' => 'edit_category_callback',
    'access arguments' => array(PERMISSION_EDIT_CATEGORY),
  );
  $items['categories/insert'] = array(
    'title' => 'Lägg till kategori',
    'page arguments' => array(1),
    'page callback' => 'insert_category_callback',
    'access arguments' => array(PERMISSION_INSERT_CATEGORY),
  );
  return $items;
}

/**
 * A hook to get the categories available
 *
 */
function categories_callback() {
  $categories = array();
  $categoryObject = new Category();
  if (isset($categoryObject)) {
    $categories['categoriesInfo'] = $categoryObject->get_all_categories_from_DB();
  }
  return theme('categories', $categories);
}

/**
 * @param     $_POST array
 * @return    empty string
 */
function edit_category() {
  if (isset($_POST['edit_category_id']) &&
      isset($_POST['edit_category_name']) &&
      isset($_POST['edit_category_description']) &&
      isset($_POST['edit_category_type'])) {
    $categoryObject = new Category();
    if (isset($categoryObject)) {
      $categoryObject->edit_category($_POST);
//      drupal_goto('categories');
    }
    return '';
  }
  else {
    drupal_set_message(t('Du måste ange namn och beskrivning!'), 'error');
  }
}

/**
 * @param     $_POST array
 * @return    empty string
 */
function delete_category() {
  if (isset($_POST['edit_category_id'])) {
    $categoryObject = new Category();
    if (isset($categoryObject)) {
      $categoryObject->delete_category($_POST['edit_category_id']);
//      drupal_goto('categories');
    }
    return '';
  }
  else {
    drupal_set_message(t('Det gick inte att ta bort kategorin!'), 'error');
  }
}

/**
 * @return    category theme & edit category function call
 */
function edit_category_callback() {
  $categoryEdit = array();
  if (isset($_POST['edit_category'])) {
    $categoryEdit['editCategory'] = edit_category();
  }
  if (isset($_POST['delete_category'])) {
    $categoryEdit['deleteCategory'] = delete_category();
  }
  return theme('categories', $categoryEdit);
}

/**
 * @param     $_POST array
 * @return    empty string
 */
function insert_category() {
  if (isset($_POST['category_name']) &&
      isset($_POST['category_description']) &&
      isset($_POST['category_type'])) {
    $categoryObject = new Category();
    if (isset($categoryObject)) {
      $categoryObject->insert_category($_POST);
      drupal_goto('categories');
    }
    return '';
  }
  else {
    drupal_set_message(t('Du måste ange namn och beskrivning!'), 'error');
  }
}

/**
 *
 * @param type $catId
 */
function insert_category_callback() {
  $categoryInsert = array();
  if (isset($_POST['insert_category'])) {
    $categoryInsert['insertCategory'] = insert_category();
  }

  return theme('categories', $categoryInsert);
}

 /**
 * View the module theme for the categories
 * @return  array $items
 */
function categories_theme($existing, $type, $theme, $path) {
  $items['categories'] = array(
    'render element' => 'categories',
    'template'       => 'categories',
    'arguments'      => array('form' => NULL),
    'path'           => drupal_get_path('module', 'categories'),
  );
  return $items;
}
